"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4805],{8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>l});var r=n(6540);const o={},t=r.createContext(o);function c(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(t.Provider,{value:s},e.children)}},9595:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api/blockly/blocks/inference/proptest/README","title":"README","description":"r-blocks v0.1.0","source":"@site/docs/api/blockly/blocks/inference/proptest/README.md","sourceDirName":"api/blockly/blocks/inference/proptest","slug":"/api/blockly/blocks/inference/proptest/","permalink":"/r-blocks/docs/api/blockly/blocks/inference/proptest/","draft":false,"unlisted":false,"editUrl":"https://github.com/dhyeymavani2003/r-blocks/tree/main/docs/api/blockly/blocks/inference/proptest/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"README","permalink":"/r-blocks/docs/api/blockly/blocks/inference/bootstrap/"},"next":{"title":"default","permalink":"/r-blocks/docs/api/blockly/blocks/inference/proptest/variables/default"}}');var o=n(4848),t=n(8453);const c={},l=void 0,i={},a=[{value:"Variables",id:"variables",level:2}];function p(e){const s={a:"a",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.p,{children:(0,o.jsx)(s.a,{href:"/r-blocks/docs/api/",children:(0,o.jsx)(s.strong,{children:"r-blocks v0.1.0"})})}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.a,{href:"/r-blocks/docs/api/modules",children:"r-blocks"})," / blockly/blocks/inference/proptest"]}),"\n",(0,o.jsx)(s.h1,{id:"blocklyblocksinferenceproptest",children:"blockly/blocks/inference/proptest"}),"\n",(0,o.jsx)(s.h2,{id:"variables",children:"Variables"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"/r-blocks/docs/api/blockly/blocks/inference/proptest/variables/default",children:"default"})}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);